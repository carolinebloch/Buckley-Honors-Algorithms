
package bts1;

import java.util.LinkedList;
import java.util.Queue;

public class BTS1 <E extends Comparable<E>> {
    private TreeNode<E> root;
    private int size = 0;
    private int depth = 0;
    
    public static void main (String[] args)
    {
        BTS1<Integer> t1 = new BTS1<>();
        t1.root = new TreeNode<>(6);
        t1.root.right = new TreeNode<>(8);
        t1.root.left = new TreeNode<>(4);
        t1.root.left.left = new TreeNode<>(2);
         
        System.out.print("Pre: ");
        t1.preorder();
        System.out.print("\nPost: ");
        t1.postorder();
        System.out.print("\nIn: ");
        t1.inorder();
        System.out.println("\n2? " + t1.contains(2));
        System.out.println("\n8? " + t1.contains(8));
        System.out.println("\n7? " + t1.contains(7));
        
        
        BTS1<Character> t2 = new BTS1<>();
        char[] arrCh = {'k','r','w', 'b','c','m','o'};
        for (char ch: arrCh)
            t2.add(ch);
        System.out.print("Pre: ");
        t2.preorder();
        System.out.print("\nPost: ");
        t2.postorder();
        System.out.print("\nIn: ");
        t2.inorder();
        System.out.print("\nLevel Order: ");
        t2.levelOrder();
        System.out.println("\nHeight: " + t2.getHeight());
        t2.getHeight();
        System.out.println("t2 isBST? " + t2.isBST());
        System.out.println("t2 isBalanced? " + t2.isBalanced());
        
        
        BTS1<String> t3 = new BTS1<>();
        t3.root = new TreeNode<>("aaa");
        t3.root.left = new TreeNode<>("bbb");
        String [] strArr = {"hsgdh", "qowi", "anbd", "uu", "po"};
        for(String str: strArr)
            t3.add(str);
        System.out.println("t3 isBST? " + t3.isBST());
        System.out.println("t3 isBalanced? " + t3.isBalanced());
        
        BTS1<String> t4 = new BTS1<>();
        String [] strArr4 = {"aaa", "bbb", "ccc"};
        for(String str: strArr4)
            t4.add(str);
        System.out.println("t4 isBalanced? " + t4.isBalanced());
        
        int count = 0;
        for (int t = 0; t < 10000; t++)
        {
            BTS1<Integer> bstTest = new BTS1<>();
            for (int i = 0; i < 10; i ++)
                bstTest.add((int)(Math.random() * 1000));
            if (bstTest.isBalanced()) count++;
        }
        System.out.println(count + " are balanced out of 1000");
        
        BTS1<String> t5 = new BTS1<>();
        t5.root = new TreeNode<>("a");
        t5.root.right = new TreeNode<>("c");
        t5.root.left = new TreeNode<>("b");
        t5.root.left.left = new TreeNode<>("d");
        t5.root.left.right = new TreeNode<>("e");
        t5.root.left.left.left = new TreeNode<>("h");
        t5.root.right.left = new TreeNode<>("f");
        t5.root.right.right = new TreeNode<>("g");
        t5.root.right.left.right = new TreeNode<>("i");
        
        System.out.println("Depth of a: " + t5.getDepth("a"));
        System.out.println("Depth of f: " + t5.getDepth("f"));
        System.out.println("Depth of w: " + t5.getDepth("w"));
    }

    public void preorder() {preorder(root);}
    private void preorder(TreeNode curr) 
    {
        if (curr == null) return;
        System.out.print(curr.data + " ");
        preorder(curr.left);
        preorder(curr.right);
    }
    
    public void postorder() {postorder(root);}
    private void postorder(TreeNode curr) 
    {
        if (curr == null) return;
        postorder(curr.left);
        postorder(curr.right);
        System.out.print(curr.data + " "); 
    }
    
    public void inorder() {inorder(root);}
    private void inorder(TreeNode curr) 
    {
        if (curr == null) return;
        inorder(curr.left);
        System.out.print(curr.data + " "); 
        inorder(curr.right);
    }

    public boolean contains(E data)
    { 
        return contains(data,root);
        
//        TreeNode<E> curr = root;
//        while (curr != null)
//        {
//            if (curr.data.compareTo(data) == 0)
//                return true;
//            if (curr.data.compareTo(data) > 0)
//                curr = curr.left;
//            else
//                curr = curr.right;
//        }
//        return false;
    }
    
    private boolean contains(E data, TreeNode<E> curr)
    {
        if (curr == null) return false;
        if (curr.data.compareTo(data) == 0) return true;
        if (curr.data.compareTo(data) > 0)
            return contains(data, curr.left);
        else
            return contains(data, curr.right);
        
    }
    
    public boolean add(E data) 
    {
         return add(data, root);
//        if (root == null)
//        {
//            root = new TreeNode<>(data);
//        }
//        else
//        {
//            TreeNode<E> curr = root, parent = root;
//            while (curr != null) 
//            {
//                if (curr.data.compareTo(data) == 0) return false;
//                parent = curr;
//                if(curr.data.compareTo(data) > 0)
//                    curr = curr.left;
//                else
//                    curr = curr.right;
//            }
//            
//            TreeNode<E> newNode = new TreeNode<>(data);
//            if(parent.data.compareTo(data) > 0)
//                parent.left = newNode;
//            else
//                parent.right = newNode;
//        }
//        
//        return true;
    }
    
    public boolean add(E data, TreeNode<E> curr)
    {
       if (root == null)
       {
           root = new TreeNode<>(data);
       }
       else
       {
           if (curr.data.compareTo(data) == 0) return false;
           if (curr.data.compareTo(data) > 0)
           { 
                if (curr.left == null)
                   curr.left = new TreeNode<>(data);
                else
                   return add(data, curr.left);
           }
           else
           {
                if (curr.right == null)
                   curr.right = new TreeNode<>(data);
                else
                   return add(data, curr.right);
           }
       }
        size++;   
        return true;
    }
    
    public void levelOrder (){levelOrder(root);}
    
    private void levelOrder(TreeNode curr)
    {
        Queue hold = new LinkedList();
        
        int level = 0;
        
        if (curr == null) return;
        
        hold.add(curr);
        
        while(!hold.isEmpty())
        {
          level = hold.size();
          while (level > 0)
          {
             TreeNode n = (TreeNode)hold.remove();
             System.out.print(" " + n.data);
             if(n.left!=null) hold.add(n.left);
             if(n.right!=null) hold.add(n.right);
             level--;
          }
        }
        
    }
    
    public boolean remove (E data) 
    {
        return true;
    }
    
    public int getHeight() {return getHeight(root);}
    
    private int getHeight(TreeNode<E> curr)
    {
     if (curr == null) return 0;
     
     int leftHeight = getHeight(curr.left);
     int rightHeight = getHeight(curr.right);
     
     if (leftHeight > rightHeight)
         return leftHeight + 1;
     else
         return rightHeight + 1;
    }
    
    public boolean isBST (){return isBST(root, null, null);}
    
    private boolean isBST(TreeNode<E> curr, E lo, E hi)
    {
        if (curr == null) return true;
        
        if (lo != null && lo.compareTo(curr.data) >= 0) return false;
        
        if (hi != null && hi.compareTo(curr.data) <= 0) return false;
        
        return (isBST(curr.left, lo, curr.data) && isBST(curr.right, curr.data, hi));
    }
    
    public boolean isBalanced() {return isBalanced(root);}
    
    private boolean isBalanced(TreeNode<E> curr)
    {
       if (curr == null) return true;
       
       int leftHeight = getHeight(curr.left);
       int rightHeight = getHeight(curr.right);
       
       if(Math.abs(leftHeight - rightHeight) <= 1 && isBalanced(curr.left) && isBalanced(curr.right))
           return true;
       
       return false;
    }
    
    public int getDepth (E data){return getDepth(root, data, 0);}
    
    private int getDepth(TreeNode<E> curr, E data, int depth)
    {
        
        if (curr == null) return -1;
        
        if (curr.data == data) return depth;
        
        int left = getDepth(curr.left, data, depth +1);
        
        if (left != -1) return left;
        
        int right = getDepth(curr.right, data, depth +1);
        
        if (right != -1) return right;
            
        return -1;
    }

    
    private static class TreeNode<E> {
        E data;
        TreeNode<E> left, right;
        TreeNode(E d) {data = d;}
    
    }
    
 
   
}
