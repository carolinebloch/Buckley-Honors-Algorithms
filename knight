import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class BFS2 {

	static int[][] a = { {-1, -1, -1, -1, -1, -1, -1, -1}, 
						{-1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1}, 
						{-1, -1, -1, -1, -1, -1, -1, -1}, 
						{-1, -1, -1, -1, -1, -1, -1, -1}};

	static ArrayList<Cell> move = new ArrayList<Cell>();

	public static void main(String[] args) {

		Scanner scan = new Scanner(System.in);

		Cell start = new Cell(0, 0);

		int x = scan.nextInt();
		int y = scan.nextInt();
		Cell end = new Cell(x, y);

		int count = bfs(start, end);

		path(start, end, count);

		for (int i = 0; i < a.length; i++) 
		{
			for (int j = 0; j < a[0].length; j++) 
			{
				boolean hold = false;
				for (int c = 0; c < move.size(); c ++)
				{
					if (move.get(c).row == i && move.get(c).col == j)
						hold = true;
				}
				if (!hold)
					System.out.print("X ");
				else
					System.out.print(a[i][j] + " ");
			}
			System.out.println();
		}

	}

	static int bfs (Cell start, Cell end) {
		Queue<Cell> queue = new LinkedList<>();

		a[start.row][start.col] = 0;

		queue.offer(start);

		while (!queue.isEmpty()) 
		{

			Cell from = queue.poll();

			//up left 
			if (from.row > 1 && from.col > 0 && a[from.row - 2][from.col - 1] == -1) 
			{
				a[from.row - 2][from.col - 1] = a[from.row][from.col] + 1;
				queue.offer(new Cell(from.row - 2, from.col - 1));
			}

			//up right 
			if (from.row > 1 && from.col < a[0].length - 1 && a[from.row - 2][from.col + 1] == -1) 
			{
				a[from.row - 2][from.col + 1] = a[from.row][from.col] + 1;
				queue.offer(new Cell(from.row - 2, from.col + 1));
			}

			//right up
			if (from.col < a[0].length - 2 && from.row > 0 && a[from.row - 1][from.col + 2] == -1) 
			{
				a[from.row - 1][from.col + 2] = a[from.row][from.col] + 1;
				queue.offer(new Cell(from.row - 1, from.col + 2));
			}

			//right down
			if (from.col < a[0].length - 2 && from.row < a.length - 1 && a[from.row + 1][from.col + 2] == -1) 
			{
				a[from.row + 1][from.col + 2] = a[from.row][from.col] + 1;
				queue.offer(new Cell(from.row + 1, from.col + 2));
			}

			//down left 
			if (from.row < a.length - 2 && from.col > 0 && a[from.row + 2][from.col - 1] == -1) 
			{
				a[from.row + 2][from.col - 1] = a[from.row][from.col] + 1;
				queue.offer(new Cell(from.row + 2, from.col - 1));
			}

			//down right 
			if (from.row < a.length - 2 && from.col < a[0].length - 1 && a[from.row + 2][from.col + 1] == -1) 
			{
				a[from.row + 2][from.col + 1] = a[from.row][from.col] + 1;
				queue.offer(new Cell(from.row + 2, from.col + 1));
			}

			//left up 
			if (from.col > 1 && from.row > 0 && a[from.row - 1][from.col - 2] == -1) 
			{
				a[from.row - 1][from.col - 2] = a[from.row][from.col] + 1;
				queue.offer(new Cell(from.row - 1, from.col - 2));
			}

			//left down 
			if (from.col > 1 && from.row < a.length - 1 && a[from.row + 1][from.col - 2] == -1) 
			{
				a[from.row + 1][from.col - 2] = a[from.row][from.col] + 1;
				queue.offer(new Cell(from.row + 1, from.col - 2));
			}

		}
		return -1;
	}

	static void path(Cell start, Cell end, int count) {
		System.out.print("Path: ");

		Cell temp = new Cell(end.row, end.col);

		while(!(temp.row == start.row && temp.col == start.col)) 
		{
			System.out.print(temp + " --> ");

			move.add(temp);

			if (temp.row > 1 && temp.col > 0 && a[temp.row - 2][temp.col - 1] == a[temp.row][temp.col] - 1)
				temp = new Cell(temp.row - 2, temp.col - 1);

			else if (temp.row > 1 && temp.col < a[0].length - 1 && a[temp.row - 2][temp.col + 1] == a[temp.row][temp.col] - 1)
				temp = new Cell(temp.row - 2, temp.col + 1);

			else if (temp.col < a[0].length - 2 && temp.row > 0 && a[temp.row - 1][temp.col + 2] == a[temp.row][temp.col] - 1) 
				temp = new Cell(temp.row - 1, temp.col + 2);

			else if (temp.col < a[0].length - 2 && temp.row < a.length - 1 && a[temp.row + 1][temp.col + 2] == a[temp.row][temp.col] - 1) 
				temp = new Cell(temp.row + 1, temp.col + 2);

			else if (temp.row < a.length - 2 && temp.col > 0 && a[temp.row + 2][temp.col - 1] == a[temp.row][temp.col] - 1) 
				temp = new Cell(temp.row + 2, temp.col - 1);

			else if (temp.row < a.length - 2 && temp.col < a[0].length - 1 && a[temp.row + 2][temp.col + 1] == a[temp.row][temp.col] - 1) 
				temp = new Cell(temp.row + 2, temp.col + 1);

			else if (temp.col > 1 && temp.row > 0 && a[temp.row - 1][temp.col - 2] == a[temp.row][temp.col] - 1) 
				temp = new Cell(temp.row - 1, temp.col - 2);

			else if (temp.col > 1 && temp.row < a.length - 1 && a[temp.row + 1][temp.col - 2] == a[temp.row][temp.col] - 1) 
				temp = new Cell(temp.row + 1, temp.col - 2);

		}

		System.out.print(start);
		move.add(start);
		System.out.println("\n" + move);
	}

	static class Cell {
		int row, col;
		Cell(int row, int col) 
		{
			this.row = row;
			this.col = col;
		}

		public String toString() {
			return("(" + row + ", " + col + ")");
		}
	}


}
