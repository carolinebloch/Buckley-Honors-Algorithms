
package trie;

import java.util.HashMap;
import java.util.Map;


public class Trie {

    private TrieNode root = new TrieNode();
    private static int ALPHABET_SIZE = 26;
    
    public static void main(String[] args) 
    {
        Trie t = new Trie();
        t.add("cart");
        t.add("car");
        t.add("cartel");

//        
//        assert t.contains("car");
//        assert t.contains("cart");
//        assert t.contains("cartel");
//        assert t.contains("card");
//        //assert !t.contains("carf");
//        assert !t.contains("boo");
//      
//        t.delete("car");
//        assert !t.contains("ca");
//        assert !t.contains("car");
//        assert t.contains("card");
//        
        t.printAll();
        t.printStartsWith("afb");
    }
    
    
    
    public void add(String s)
    {
        Map<Character, TrieNode> child = root.child;
        
        TrieNode tmp = root;
        
        for(int i = 0; i < s.length(); i++)
        {
            char c = s.charAt(i);
            
            if (child.containsKey(c))
            {
                tmp = child.get(c);
            }
            else
            {
              tmp = new TrieNode(c);
              child.put(c, tmp);
            }
            
            child = tmp.child;
//            int index = s.charAt(i) - 'a';
//            if(tmp.alpha[index] == null)
//            {
//                tmp.alpha[index] = new TrieNode();
//                tmp = tmp.alpha[index];
//            }
//            else
//                tmp = tmp.alpha[index];
           if (i == s.length() -1)
                tmp.isEndOfWord = true;  
        }
        //mark as leaf
    }
    
    public boolean contains(String s)
    {
        Map<Character, TrieNode> child = root.child;
        //TrieNode tmp = root;
        TrieNode tmp = null;
        
        for(int i = 0; i < s.length(); i++)
        {
            char c = s.charAt(i);
            if (child.containsKey(c))
            {
                tmp = child.get(c);
                child = tmp.child;
            }
//            else
//            {
//                tmp = null;
//            }
//            int index = s.charAt(i) - 'a';
//            if(tmp.alpha[index] == null) 
//                return false;
//            tmp = tmp.alpha[index];
        }
        if (tmp != null && tmp.isEndOfWord)
            return true;
        return false;
    }
    
    public void printStartsWith (String s)
    {
        Map<Character, TrieNode> child = root.child;
        TrieNode tmp = null;
        for (int i = 0; i < s.length(); i ++)
        {
            char curLet = s.charAt(i);
            if (child.containsKey(curLet))
            {
                tmp = child.get(curLet);
                child = tmp.child;
                //System.out.println(child);
            }
            else if (!child.containsKey(curLet))
            {
                System.out.println("Not here");
                return;
            }
        }
        printAll(tmp, s);
    }
    
    public void delete(String s)
    {
       delete(s,root, 0); 
    }
    
    private boolean delete(String s, TrieNode curr, int index)
    {
        if (index == s.length()) 
        {
            if(!curr.isEndOfWord)
                return false;
            curr.isEndOfWord = false;
//            for (TrieNode tm: curr.alpha)
//                if (tm != null) return false;
//            return true;
        return curr.child.size() == 0;
        }
        
        char ch = s.charAt(index);
        TrieNode node = curr.child.get(ch);
        
        if (node == null) return false;
        
        boolean shouldDelete = delete(s, node, index + 1);
        
        if (shouldDelete)
        {
            curr.child.remove(ch);
            return curr.child.size() == 0;
        }
//        int trieIndex = s.charAt(index) - 'a';
//        if (curr.alpha[trieIndex] == null)
//            return false;
        
//        if (delete(s, curr.alpha[trieIndex], index + 1))
//        {
//            curr.alpha[trieIndex] = null;
//            for (TrieNode tm: curr.alpha)
//                if (tm != null) return false;
//            return true;
//        }
        return false;
    }
    
    public void printAll()
    {
        printAll(root, "");
    }
    
    private void printAll(TrieNode curr, String s)
    {
        Map<Character, TrieNode> child = root.child;
        if (curr.isEndOfWord)
            System.out.println(s);
        for (Character ch: curr.child.keySet())
        {
            printAll(curr.child.get(ch), s + ch);
        }
        
//       if (curr.isEndOfWord) System.out.println(s);
//		for (int i = 0; i < ALPHABET_SIZE; i++) {
//			if (curr.alpha[i] != null) {
//				printAll(curr.alpha[i], s + (char)('a' + i));
//			}
//		}

//        for (int i = 0; i < ALPHABET_SIZE; i++)
//            if (child != null)
//                printAll(child.get())
//            
//            if (curr.containsKey != null)
//                printAll(curr.alpha[i], s + (char)(i + 'a'));
    }
    
    class TrieNode 
    {
       //TrieNode[] alpha = new TrieNode [26]; // 0- 'a', 1- 'b'
       boolean isEndOfWord;
       char c;
       Map<Character, TrieNode> child = new HashMap<Character, TrieNode> ();
       
       public TrieNode() {}
       
       public TrieNode(char c)
       {
           this.c = c;
       }
       
    }
    
}
// use a map, character to a node, check for children, check size of map, empty = no children
//add 1 method, change TrieNode a little bit, bettwe way is to make it more Universal more than english alpabet
