
package bts1;

import java.util.LinkedList;
import java.util.Queue;

public class BTS1 <E extends Comparable<E>> {
    private TreeNode<E> root;
    private int size = 0;
    
    public static void main (String[] args)
    {
        BTS1<Integer> t1 = new BTS1<>();
        t1.root = new TreeNode<>(6);
        t1.root.right = new TreeNode<>(8);
        t1.root.left = new TreeNode<>(4);
        t1.root.left.left = new TreeNode<>(2);
         
        System.out.print("Pre: ");
        t1.preorder();
        System.out.print("\nPost: ");
        t1.postorder();
        System.out.print("\nIn: ");
        t1.inorder();
        System.out.println("\n2? " + t1.contains(2));
        System.out.println("\n8? " + t1.contains(8));
        System.out.println("\n7? " + t1.contains(7));
        
        BTS1<Character> t2 = new BTS1<>();
        char[] arrCh = {'k','r','w', 'b','c','m','o'};
        for (char ch: arrCh)
            t2.add(ch);
        System.out.print("Pre: ");
        t2.preorder();
        System.out.print("\nPost: ");
        t2.postorder();
        System.out.print("\nIn: ");
        t2.inorder();
        System.out.print("\nLevel Order: ");
        t2.levelOrder();
    }

    public void preorder() {preorder(root);}
    private void preorder(TreeNode curr) 
    {
        if (curr == null) return;
        System.out.print(curr.data + " ");
        preorder(curr.left);
        preorder(curr.right);
    }
    
    public void postorder() {postorder(root);}
    private void postorder(TreeNode curr) 
    {
        if (curr == null) return;
        postorder(curr.left);
        postorder(curr.right);
        System.out.print(curr.data + " "); 
    }
    
    public void inorder() {inorder(root);}
    private void inorder(TreeNode curr) 
    {
        if (curr == null) return;
        inorder(curr.left);
        System.out.print(curr.data + " "); 
        inorder(curr.right);
    }

    public boolean contains(E data)
    { 
        return contains(data,root);
        
//        TreeNode<E> curr = root;
//        while (curr != null)
//        {
//            if (curr.data.compareTo(data) == 0)
//                return true;
//            if (curr.data.compareTo(data) > 0)
//                curr = curr.left;
//            else
//                curr = curr.right;
//        }
//        return false;
    }
    
    private boolean contains(E data, TreeNode<E> curr)
    {
        if (curr == null) return false;
        if (curr.data.compareTo(data) == 0) return true;
        if (curr.data.compareTo(data) > 0)
            return contains(data, curr.left);
        else
            return contains(data, curr.right);
        
    }
    
    public boolean add(E data) 
    {
         return add(data, root);
//        if (root == null)
//        {
//            root = new TreeNode<>(data);
//        }
//        else
//        {
//            TreeNode<E> curr = root, parent = root;
//            while (curr != null) 
//            {
//                if (curr.data.compareTo(data) == 0) return false;
//                parent = curr;
//                if(curr.data.compareTo(data) > 0)
//                    curr = curr.left;
//                else
//                    curr = curr.right;
//            }
//            
//            TreeNode<E> newNode = new TreeNode<>(data);
//            if(parent.data.compareTo(data) > 0)
//                parent.left = newNode;
//            else
//                parent.right = newNode;
//        }
//        
//        return true;
    }
    
    public boolean add(E data, TreeNode<E> curr)
    {
       if (root == null)
       {
           root = new TreeNode<>(data);
       }
       else
       {
           if (curr.data.compareTo(data) == 0) return false;
           if (curr.data.compareTo(data) > 0)
           { 
                if (curr.left == null)
                   curr.left = new TreeNode<>(data);
                else
                   return add(data, curr.left);
           }
           else
           {
                if (curr.right == null)
                   curr.right = new TreeNode<>(data);
                else
                   return add(data, curr.right);
           }
       }
           
        return true;
    }
    
    public void levelOrder (){levelOrder(root);}
    
    private void levelOrder(TreeNode curr)
    {
        Queue hold = new LinkedList();
        
        int level = 0;
        
        if (curr == null) return;
        
        hold.add(curr);
        
        while(!hold.isEmpty())
        {
          level = hold.size();
          while (level > 0)
          {
             TreeNode n = (TreeNode)hold.remove();
             System.out.print(" " + n.data);
             if(n.left!=null) hold.add(n.left);
             if(n.right!=null) hold.add(n.right);
             level--;
          }
        }
        
    }
    
    public boolean remove (E data) 
    {
        return true;
    }

    
    private static class TreeNode<E> {
        E data;
        TreeNode<E> left, right;
        TreeNode(E d) {data = d;}
    
    }
    
 
   
}
