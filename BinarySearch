/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package binarysearch;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

/**
 *
 * @author carolinebloch
 */
public class BinarySearch extends Application {
    
    int size = 100;
    int start = 0;
    int square = 10;
    int num [] = new int [size];
    GridPane root = new GridPane ();
    Rectangle[] rec = new Rectangle[size+1];
    Color search = Color.CORNFLOWERBLUE;
    Color hold = Color.TRANSPARENT;
    Color end = Color.CRIMSON;
    int input = (int) (Math.random() * size + 1);
    
    @Override
    public void start(Stage primaryStage) {
      
        for (int c = 0; c < size; c ++)
        {
            num[c] = (int) (Math.random() * size);
        }
        
        Arrays.sort(num);
        
        
        for (int i = 0; i < size; i++)
        {
                StackPane stPane = new StackPane();
                rec[i+1] = new Rectangle(square, square);
                rec[i+1].setFill(hold);
                rec[i+1].setStrokeWidth(2);
                stPane.setMinSize(square, square);
                stPane.getChildren().addAll(rec[i+1], new Label("" + num[i]));
                root.add(stPane, i, 0); 
         }
        
        System.out.println(input);
        
        root.add(new Label("" + input), 0, 2);
        
        new Thread(() -> {
            
        while(start <= size)
        {
               try {
                
               int middle = (start + size) / 2;
               if (num[middle - 1] == input) 
               {
                   rec[middle].setFill(end);
                   start = size +1;
               }
               else if (input > num[middle-1])
               {
                   rec[middle].setFill(search);
                   start = middle;
               }
               else
               {
                   rec[middle].setFill(search);
                   size = middle;
               }


           Thread.sleep(2000);} catch (InterruptedException ex) {}
        }
                
                }).start();
        
        Scene scene = new Scene(root);
        
        primaryStage.setTitle("Binary Search");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }
          
   
}
