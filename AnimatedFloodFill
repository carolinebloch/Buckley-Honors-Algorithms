/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package animatedfloodfill;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

/**
 *
 * @author carolinebloch
 */
public class AnimatedFloodFill extends Application {
    
    int N, M, size = 50;
    int [][] maze;
    int [][] solution;
    StackPane[][] pane;
    String borderColor = "-fx-border-color: black;";
    String fillColor = "-fx-background-color: pink;";
    String borderWidth = "-fx-border-width: ";
    
    @Override
    public void start(Stage primaryStage) throws FileNotFoundException, IOException {
        
        BufferedReader in = new BufferedReader(new FileReader("maze.txt"));
        StringTokenizer st = new StringTokenizer(in.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        System.out.print(N + " " + M);
        maze = new int [N][M];
        pane = new StackPane[N][M];
        solution = new int[N][M];
        GridPane root = new GridPane();
        
        for (int i = 0; i < N; i ++)
        {
            st = new StringTokenizer(in.readLine());
            for (int j = 0; j < M; j++)
            {
             solution[i][j] = -1;
             maze[i][j] = Integer.parseInt(st.nextToken());  
             pane[i][j] = new StackPane();
             pane[i][j].setPrefSize(size, size);
             String top = ((maze[i][j] & 8) == 8) ? "2 " : "0 ";
             String right = ((maze[i][j] & 4) == 4) ? "2 " : "0 ";
             String bottom = ((maze[i][j] & 2) == 2) ? "2 " : "0 ";
             String left = ((maze[i][j] & 1) == 1) ? "2;" : "0;";
             //System.out.println(borderWidth);
             pane[i][j].setStyle(borderColor + borderWidth + top + right + bottom + left);
             root.add(pane[i][j], j, i);
            }
        }
        
        
//        root.setStyle("-fx-background-color: red");
//        root.setStyle("-fx-background-color: red;"
//                + "-fx-border-color: black;" 
//                + "-fx-border-width: 6 0 6 0");
        
        Scene scene = new Scene(root);
        
        primaryStage.setTitle("Flood Fill");
        primaryStage.setScene(scene);
        primaryStage.show();
        primaryStage.setOnCloseRequest(e -> {
        System.exit(0);
        Platform.exit();
    });
        
        
        new Thread (() -> {
            try {
                Cell startCell = new Cell(0,0);
                Cell endCell = new Cell(N-1,M-1);
                fill(startCell);
                showPath(endCell);
            } catch (InterruptedException ex) {}
        }).start();
    }
    
    void showPath(Cell to) throws InterruptedException{
        String pathColor = "-fx-background-color: purple;";
        pane[to.i][to.j].setStyle(pane[to.i][to.j].getStyle() + pathColor);
        while(solution[to.i][to.j] != 0)
        {
           Thread.sleep(200);
           if((to.i -1) >= 0 && solution[to.i-1][to.j] == solution[to.i][to.j] -1) 
           {
               pane[to.i-1][to.j].setStyle(pane[to.i-1][to.j].getStyle() + pathColor);
               Cell hold = new Cell (to.i-1,to.j);
               showPath(hold);
               solution[to.i][to.j] = solution[to.i-1][to.j];
           }
           else if((to.j -1) >= 0 && solution[to.i][to.j-1] == solution[to.i][to.j] -1 ) 
           {
               pane[to.i][to.j-1].setStyle(pane[to.i][to.j-1].getStyle() + pathColor);
               Cell hold = new Cell (to.i,to.j-1);
               showPath(hold);
               solution[to.i][to.j] = solution[to.i][to.j-1];
           }
           else if((to.i +1) <= N-1 && solution[to.i+1][to.j] == solution[to.i][to.j] -1) 
           {
               pane[to.i+1][to.j].setStyle(pane[to.i+1][to.j].getStyle() + pathColor);
               Cell hold = new Cell (to.i+1,to.j);
               showPath(hold);
               solution[to.i][to.j] = solution[to.i+1][to.j];
           }
           else if( (to.j +1) <= M-1 && solution[to.i][to.j+1] == solution[to.i][to.j] -1) 
           {
               pane[to.i][to.j+1].setStyle(pane[to.i][to.j+1].getStyle() + pathColor);
               Cell hold = new Cell (to.i,to.j+1);
               showPath(hold);
               solution[to.i][to.j] = solution[to.i][to.j+1];
           }
           else
               System.out.print("here");
           
           //pane[to.i][to.j].setStyle(pane[to.i][to.j].getStyle() + fillColor);   
        }
        
    }
    
    void fill(Cell startCell) throws InterruptedException{
        int[] di = {-1, 0, 1, 0};
        int[] dj = {0, 1, 0, -1};
        int[] bin = {8, 4, 2, 1};
        
        Queue<Cell> queue = new LinkedList<>(); 
        solution[startCell.i][startCell.j] = 0;
        queue.add(startCell);
        
        pane[startCell.i][startCell.j].setStyle(pane[startCell.i][startCell.j].getStyle() + fillColor);
        
        
        while (!queue.isEmpty()) {
            Cell from = queue.poll();
            pane[from.i][from.j].setStyle(pane[from.i][from.j].getStyle() + fillColor);
            Thread.sleep(200);
            for (int dir = 0; dir < 4; dir++)
            {
                
                if((maze[from.i][from.j] & bin[dir]) != bin[dir] && solution[from.i+ di[dir]][from.j + dj[dir]] == -1)
                {
                    //mark the distance
                   
                    solution[from.i + di[dir]][from.j + dj[dir]] = solution[from.i][from.j] + 1;
                    
                    
                    //showPath(endCell);
                    //add new cell to the queue
                     
                    queue.offer(new Cell(from.i + di[dir], from.j + dj[dir]));
                    
            }
        }
                
    }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }
    
}

class Cell {
    int i, j;
    Cell (int i, int j){
        this.i = i;
        this.j = j;
    }
}



7 10
9 12 9 8 8 8 8 8 8 12 
1 4 1 0 0 4 1 0 0 4 
1 4 3 2 2 4 1 0 0 4
1 2 10 8 8 0 0 0 0 4 
1 8 8 2 2 0 4 1 0 4 
1 2 0 8 8 0 4 3 2 4
3 14 3 2 2 2 2 10 10 6 
